/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "nynn_mm_types.h"

#include <algorithm>

namespace nynn { namespace mm {

const char* xchunk_entry_t::ascii_fingerprint = "3F1101A329696BD4B88B9212A3D74DCD";
const uint8_t xchunk_entry_t::binary_fingerprint[16] = {0x3F,0x11,0x01,0xA3,0x29,0x69,0x6B,0xD4,0xB8,0x8B,0x92,0x12,0xA3,0xD7,0x4D,0xCD};

uint32_t xchunk_entry_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__path = false;
  bool isset__flag = false;
  bool isset__minvertex = false;
  bool isset__maxvertex = false;
  bool isset__where = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_path);
          isset__path = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->_flag);
          isset__flag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_minvertex);
          isset__minvertex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_maxvertex);
          isset__maxvertex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_where);
          isset__where = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__path)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__flag)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__minvertex)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__maxvertex)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__where)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t xchunk_entry_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("xchunk_entry_t");

  xfer += oprot->writeFieldBegin("_path", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->_path);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_flag", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->_flag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_minvertex", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->_minvertex);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_maxvertex", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->_maxvertex);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_where", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->_where);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(xchunk_entry_t &a, xchunk_entry_t &b) {
  using ::std::swap;
  swap(a._path, b._path);
  swap(a._flag, b._flag);
  swap(a._minvertex, b._minvertex);
  swap(a._maxvertex, b._maxvertex);
  swap(a._where, b._where);
}

const char* inetaddr_t::ascii_fingerprint = "F3540C99C9016F618854ABDC57D34F96";
const uint8_t inetaddr_t::binary_fingerprint[16] = {0xF3,0x54,0x0C,0x99,0xC9,0x01,0x6F,0x61,0x88,0x54,0xAB,0xDC,0x57,0xD3,0x4F,0x96};

uint32_t inetaddr_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__hostname = false;
  bool isset__ipaddr = false;
  bool isset__port = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_hostname);
          isset__hostname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_ipaddr);
          isset__ipaddr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->_port);
          isset__port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__hostname)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__ipaddr)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__port)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t inetaddr_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("inetaddr_t");

  xfer += oprot->writeFieldBegin("_hostname", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->_hostname);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_ipaddr", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->_ipaddr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_port", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->_port);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(inetaddr_t &a, inetaddr_t &b) {
  using ::std::swap;
  swap(a._hostname, b._hostname);
  swap(a._ipaddr, b._ipaddr);
  swap(a._port, b._port);
}

const char* recommend_self_t::ascii_fingerprint = "66300C0BD0E5C868AF1BEF652F664894";
const uint8_t recommend_self_t::binary_fingerprint[16] = {0x66,0x30,0x0C,0x0B,0xD0,0xE5,0xC8,0x68,0xAF,0x1B,0xEF,0x65,0x2F,0x66,0x48,0x94};

uint32_t recommend_self_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__inetaddrtab = false;
  bool isset__parttab = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->_inetaddrtab.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->_inetaddrtab.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += this->_inetaddrtab[_i4].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset__inetaddrtab = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->_parttab.clear();
            uint32_t _size5;
            ::apache::thrift::protocol::TType _etype8;
            xfer += iprot->readListBegin(_etype8, _size5);
            this->_parttab.resize(_size5);
            uint32_t _i9;
            for (_i9 = 0; _i9 < _size5; ++_i9)
            {
              xfer += this->_parttab[_i9].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset__parttab = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__inetaddrtab)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__parttab)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t recommend_self_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("recommend_self_t");

  xfer += oprot->writeFieldBegin("_inetaddrtab", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->_inetaddrtab.size()));
    std::vector<inetaddr_t> ::const_iterator _iter10;
    for (_iter10 = this->_inetaddrtab.begin(); _iter10 != this->_inetaddrtab.end(); ++_iter10)
    {
      xfer += (*_iter10).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_parttab", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->_parttab.size()));
    std::vector<xchunk_entry_t> ::const_iterator _iter11;
    for (_iter11 = this->_parttab.begin(); _iter11 != this->_parttab.end(); ++_iter11)
    {
      xfer += (*_iter11).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(recommend_self_t &a, recommend_self_t &b) {
  using ::std::swap;
  swap(a._inetaddrtab, b._inetaddrtab);
  swap(a._parttab, b._parttab);
}

}} // namespace
