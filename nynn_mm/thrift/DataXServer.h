/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef DataXServer_H
#define DataXServer_H

#include <thrift/TDispatchProcessor.h>
#include "nynn_mm_types.h"

namespace nynn { namespace mm {

class DataXServerIf {
 public:
  virtual ~DataXServerIf() {}
  virtual void submit(recommend_self_t& _return, const recommend_self_t& partchktab) = 0;
  virtual bool update(const std::vector<std::vector<int8_t> > & data) = 0;
};

class DataXServerIfFactory {
 public:
  typedef DataXServerIf Handler;

  virtual ~DataXServerIfFactory() {}

  virtual DataXServerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(DataXServerIf* /* handler */) = 0;
};

class DataXServerIfSingletonFactory : virtual public DataXServerIfFactory {
 public:
  DataXServerIfSingletonFactory(const boost::shared_ptr<DataXServerIf>& iface) : iface_(iface) {}
  virtual ~DataXServerIfSingletonFactory() {}

  virtual DataXServerIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(DataXServerIf* /* handler */) {}

 protected:
  boost::shared_ptr<DataXServerIf> iface_;
};

class DataXServerNull : virtual public DataXServerIf {
 public:
  virtual ~DataXServerNull() {}
  void submit(recommend_self_t& /* _return */, const recommend_self_t& /* partchktab */) {
    return;
  }
  bool update(const std::vector<std::vector<int8_t> > & /* data */) {
    bool _return = false;
    return _return;
  }
};

typedef struct _DataXServer_submit_args__isset {
  _DataXServer_submit_args__isset() : partchktab(false) {}
  bool partchktab;
} _DataXServer_submit_args__isset;

class DataXServer_submit_args {
 public:

  DataXServer_submit_args() {
  }

  virtual ~DataXServer_submit_args() throw() {}

  recommend_self_t partchktab;

  _DataXServer_submit_args__isset __isset;

  void __set_partchktab(const recommend_self_t& val) {
    partchktab = val;
  }

  bool operator == (const DataXServer_submit_args & rhs) const
  {
    if (!(partchktab == rhs.partchktab))
      return false;
    return true;
  }
  bool operator != (const DataXServer_submit_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataXServer_submit_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataXServer_submit_pargs {
 public:


  virtual ~DataXServer_submit_pargs() throw() {}

  const recommend_self_t* partchktab;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataXServer_submit_result__isset {
  _DataXServer_submit_result__isset() : success(false) {}
  bool success;
} _DataXServer_submit_result__isset;

class DataXServer_submit_result {
 public:

  DataXServer_submit_result() {
  }

  virtual ~DataXServer_submit_result() throw() {}

  recommend_self_t success;

  _DataXServer_submit_result__isset __isset;

  void __set_success(const recommend_self_t& val) {
    success = val;
  }

  bool operator == (const DataXServer_submit_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataXServer_submit_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataXServer_submit_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataXServer_submit_presult__isset {
  _DataXServer_submit_presult__isset() : success(false) {}
  bool success;
} _DataXServer_submit_presult__isset;

class DataXServer_submit_presult {
 public:


  virtual ~DataXServer_submit_presult() throw() {}

  recommend_self_t* success;

  _DataXServer_submit_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataXServer_update_args__isset {
  _DataXServer_update_args__isset() : data(false) {}
  bool data;
} _DataXServer_update_args__isset;

class DataXServer_update_args {
 public:

  DataXServer_update_args() {
  }

  virtual ~DataXServer_update_args() throw() {}

  std::vector<std::vector<int8_t> >  data;

  _DataXServer_update_args__isset __isset;

  void __set_data(const std::vector<std::vector<int8_t> > & val) {
    data = val;
  }

  bool operator == (const DataXServer_update_args & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const DataXServer_update_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataXServer_update_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataXServer_update_pargs {
 public:


  virtual ~DataXServer_update_pargs() throw() {}

  const std::vector<std::vector<int8_t> > * data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataXServer_update_result__isset {
  _DataXServer_update_result__isset() : success(false) {}
  bool success;
} _DataXServer_update_result__isset;

class DataXServer_update_result {
 public:

  DataXServer_update_result() : success(0) {
  }

  virtual ~DataXServer_update_result() throw() {}

  bool success;

  _DataXServer_update_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const DataXServer_update_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataXServer_update_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataXServer_update_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataXServer_update_presult__isset {
  _DataXServer_update_presult__isset() : success(false) {}
  bool success;
} _DataXServer_update_presult__isset;

class DataXServer_update_presult {
 public:


  virtual ~DataXServer_update_presult() throw() {}

  bool* success;

  _DataXServer_update_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class DataXServerClient : virtual public DataXServerIf {
 public:
  DataXServerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  DataXServerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void submit(recommend_self_t& _return, const recommend_self_t& partchktab);
  void send_submit(const recommend_self_t& partchktab);
  void recv_submit(recommend_self_t& _return);
  bool update(const std::vector<std::vector<int8_t> > & data);
  void send_update(const std::vector<std::vector<int8_t> > & data);
  bool recv_update();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class DataXServerProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<DataXServerIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (DataXServerProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_submit(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_update(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  DataXServerProcessor(boost::shared_ptr<DataXServerIf> iface) :
    iface_(iface) {
    processMap_["submit"] = &DataXServerProcessor::process_submit;
    processMap_["update"] = &DataXServerProcessor::process_update;
  }

  virtual ~DataXServerProcessor() {}
};

class DataXServerProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  DataXServerProcessorFactory(const ::boost::shared_ptr< DataXServerIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< DataXServerIfFactory > handlerFactory_;
};

class DataXServerMultiface : virtual public DataXServerIf {
 public:
  DataXServerMultiface(std::vector<boost::shared_ptr<DataXServerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~DataXServerMultiface() {}
 protected:
  std::vector<boost::shared_ptr<DataXServerIf> > ifaces_;
  DataXServerMultiface() {}
  void add(boost::shared_ptr<DataXServerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void submit(recommend_self_t& _return, const recommend_self_t& partchktab) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->submit(_return, partchktab);
    }
    ifaces_[i]->submit(_return, partchktab);
    return;
  }

  bool update(const std::vector<std::vector<int8_t> > & data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->update(data);
    }
    return ifaces_[i]->update(data);
  }

};

}} // namespace

#endif
