/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef DataXMaster_H
#define DataXMaster_H

#include <thrift/TDispatchProcessor.h>
#include "nynn_mm_types.h"

namespace nynn { namespace mm {

class DataXMasterIf {
 public:
  virtual ~DataXMasterIf() {}
  virtual void submit(xletter_t& _return, const xletter_t& quest) = 0;
  virtual bool update(const std::vector<std::vector<int8_t> > & data) = 0;
};

class DataXMasterIfFactory {
 public:
  typedef DataXMasterIf Handler;

  virtual ~DataXMasterIfFactory() {}

  virtual DataXMasterIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(DataXMasterIf* /* handler */) = 0;
};

class DataXMasterIfSingletonFactory : virtual public DataXMasterIfFactory {
 public:
  DataXMasterIfSingletonFactory(const boost::shared_ptr<DataXMasterIf>& iface) : iface_(iface) {}
  virtual ~DataXMasterIfSingletonFactory() {}

  virtual DataXMasterIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(DataXMasterIf* /* handler */) {}

 protected:
  boost::shared_ptr<DataXMasterIf> iface_;
};

class DataXMasterNull : virtual public DataXMasterIf {
 public:
  virtual ~DataXMasterNull() {}
  void submit(xletter_t& /* _return */, const xletter_t& /* quest */) {
    return;
  }
  bool update(const std::vector<std::vector<int8_t> > & /* data */) {
    bool _return = false;
    return _return;
  }
};

typedef struct _DataXMaster_submit_args__isset {
  _DataXMaster_submit_args__isset() : quest(false) {}
  bool quest;
} _DataXMaster_submit_args__isset;

class DataXMaster_submit_args {
 public:

  DataXMaster_submit_args() {
  }

  virtual ~DataXMaster_submit_args() throw() {}

  xletter_t quest;

  _DataXMaster_submit_args__isset __isset;

  void __set_quest(const xletter_t& val) {
    quest = val;
  }

  bool operator == (const DataXMaster_submit_args & rhs) const
  {
    if (!(quest == rhs.quest))
      return false;
    return true;
  }
  bool operator != (const DataXMaster_submit_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataXMaster_submit_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataXMaster_submit_pargs {
 public:


  virtual ~DataXMaster_submit_pargs() throw() {}

  const xletter_t* quest;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataXMaster_submit_result__isset {
  _DataXMaster_submit_result__isset() : success(false) {}
  bool success;
} _DataXMaster_submit_result__isset;

class DataXMaster_submit_result {
 public:

  DataXMaster_submit_result() {
  }

  virtual ~DataXMaster_submit_result() throw() {}

  xletter_t success;

  _DataXMaster_submit_result__isset __isset;

  void __set_success(const xletter_t& val) {
    success = val;
  }

  bool operator == (const DataXMaster_submit_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataXMaster_submit_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataXMaster_submit_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataXMaster_submit_presult__isset {
  _DataXMaster_submit_presult__isset() : success(false) {}
  bool success;
} _DataXMaster_submit_presult__isset;

class DataXMaster_submit_presult {
 public:


  virtual ~DataXMaster_submit_presult() throw() {}

  xletter_t* success;

  _DataXMaster_submit_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataXMaster_update_args__isset {
  _DataXMaster_update_args__isset() : data(false) {}
  bool data;
} _DataXMaster_update_args__isset;

class DataXMaster_update_args {
 public:

  DataXMaster_update_args() {
  }

  virtual ~DataXMaster_update_args() throw() {}

  std::vector<std::vector<int8_t> >  data;

  _DataXMaster_update_args__isset __isset;

  void __set_data(const std::vector<std::vector<int8_t> > & val) {
    data = val;
  }

  bool operator == (const DataXMaster_update_args & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const DataXMaster_update_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataXMaster_update_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataXMaster_update_pargs {
 public:


  virtual ~DataXMaster_update_pargs() throw() {}

  const std::vector<std::vector<int8_t> > * data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataXMaster_update_result__isset {
  _DataXMaster_update_result__isset() : success(false) {}
  bool success;
} _DataXMaster_update_result__isset;

class DataXMaster_update_result {
 public:

  DataXMaster_update_result() : success(0) {
  }

  virtual ~DataXMaster_update_result() throw() {}

  bool success;

  _DataXMaster_update_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const DataXMaster_update_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataXMaster_update_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataXMaster_update_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataXMaster_update_presult__isset {
  _DataXMaster_update_presult__isset() : success(false) {}
  bool success;
} _DataXMaster_update_presult__isset;

class DataXMaster_update_presult {
 public:


  virtual ~DataXMaster_update_presult() throw() {}

  bool* success;

  _DataXMaster_update_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class DataXMasterClient : virtual public DataXMasterIf {
 public:
  DataXMasterClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  DataXMasterClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void submit(xletter_t& _return, const xletter_t& quest);
  void send_submit(const xletter_t& quest);
  void recv_submit(xletter_t& _return);
  bool update(const std::vector<std::vector<int8_t> > & data);
  void send_update(const std::vector<std::vector<int8_t> > & data);
  bool recv_update();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class DataXMasterProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<DataXMasterIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (DataXMasterProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_submit(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_update(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  DataXMasterProcessor(boost::shared_ptr<DataXMasterIf> iface) :
    iface_(iface) {
    processMap_["submit"] = &DataXMasterProcessor::process_submit;
    processMap_["update"] = &DataXMasterProcessor::process_update;
  }

  virtual ~DataXMasterProcessor() {}
};

class DataXMasterProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  DataXMasterProcessorFactory(const ::boost::shared_ptr< DataXMasterIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< DataXMasterIfFactory > handlerFactory_;
};

class DataXMasterMultiface : virtual public DataXMasterIf {
 public:
  DataXMasterMultiface(std::vector<boost::shared_ptr<DataXMasterIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~DataXMasterMultiface() {}
 protected:
  std::vector<boost::shared_ptr<DataXMasterIf> > ifaces_;
  DataXMasterMultiface() {}
  void add(boost::shared_ptr<DataXMasterIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void submit(xletter_t& _return, const xletter_t& quest) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->submit(_return, quest);
    }
    ifaces_[i]->submit(_return, quest);
    return;
  }

  bool update(const std::vector<std::vector<int8_t> > & data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->update(data);
    }
    return ifaces_[i]->update(data);
  }

};

}} // namespace

#endif
