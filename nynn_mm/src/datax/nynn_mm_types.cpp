/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "nynn_mm_types.h"

#include <algorithm>

namespace nynn { namespace mm {

const char* xchunk_entry_t::ascii_fingerprint = "3F1101A329696BD4B88B9212A3D74DCD";
const uint8_t xchunk_entry_t::binary_fingerprint[16] = {0x3F,0x11,0x01,0xA3,0x29,0x69,0x6B,0xD4,0xB8,0x8B,0x92,0x12,0xA3,0xD7,0x4D,0xCD};

uint32_t xchunk_entry_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__path = false;
  bool isset__flag = false;
  bool isset__minvtx = false;
  bool isset__maxvtx = false;
  bool isset__where = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_path);
          isset__path = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->_flag);
          isset__flag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_minvtx);
          isset__minvtx = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_maxvtx);
          isset__maxvtx = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_where);
          isset__where = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__path)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__flag)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__minvtx)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__maxvtx)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__where)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t xchunk_entry_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("xchunk_entry_t");

  xfer += oprot->writeFieldBegin("_path", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->_path);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_flag", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->_flag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_minvtx", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->_minvtx);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_maxvtx", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->_maxvtx);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_where", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->_where);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(xchunk_entry_t &a, xchunk_entry_t &b) {
  using ::std::swap;
  swap(a._path, b._path);
  swap(a._flag, b._flag);
  swap(a._minvtx, b._minvtx);
  swap(a._maxvtx, b._maxvtx);
  swap(a._where, b._where);
}

const char* xedge_t::ascii_fingerprint = "EA2D65F1E0BB78760205682082304B41";
const uint8_t xedge_t::binary_fingerprint[16] = {0xEA,0x2D,0x65,0xF1,0xE0,0xBB,0x78,0x76,0x02,0x05,0x68,0x20,0x82,0x30,0x4B,0x41};

uint32_t xedge_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__timestamp = false;
  bool isset__sink = false;
  bool isset__value = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_timestamp);
          isset__timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_sink);
          isset__sink = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_value);
          isset__value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__timestamp)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__sink)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__value)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t xedge_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("xedge_t");

  xfer += oprot->writeFieldBegin("_timestamp", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->_timestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_sink", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->_sink);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_value", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(xedge_t &a, xedge_t &b) {
  using ::std::swap;
  swap(a._timestamp, b._timestamp);
  swap(a._sink, b._sink);
  swap(a._value, b._value);
}

const char* xvertex_t::ascii_fingerprint = "6D4C3126EDCD157830FC1771BBF28AC6";
const uint8_t xvertex_t::binary_fingerprint[16] = {0x6D,0x4C,0x31,0x26,0xED,0xCD,0x15,0x78,0x30,0xFC,0x17,0x71,0xBB,0xF2,0x8A,0xC6};

uint32_t xvertex_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__source = false;
  bool isset__edge = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->_source);
          isset__source = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->_edge.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->_edge.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += this->_edge[_i4].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset__edge = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__source)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__edge)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t xvertex_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("xvertex_t");

  xfer += oprot->writeFieldBegin("_source", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->_source);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_edge", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->_edge.size()));
    std::vector<xedge_t> ::const_iterator _iter5;
    for (_iter5 = this->_edge.begin(); _iter5 != this->_edge.end(); ++_iter5)
    {
      xfer += (*_iter5).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(xvertex_t &a, xvertex_t &b) {
  using ::std::swap;
  swap(a._source, b._source);
  swap(a._edge, b._edge);
}

const char* xinetaddr_t::ascii_fingerprint = "F3540C99C9016F618854ABDC57D34F96";
const uint8_t xinetaddr_t::binary_fingerprint[16] = {0xF3,0x54,0x0C,0x99,0xC9,0x01,0x6F,0x61,0x88,0x54,0xAB,0xDC,0x57,0xD3,0x4F,0x96};

uint32_t xinetaddr_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__hostname = false;
  bool isset__hostaddr = false;
  bool isset__port = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_hostname);
          isset__hostname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_hostaddr);
          isset__hostaddr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->_port);
          isset__port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__hostname)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__hostaddr)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__port)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t xinetaddr_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("xinetaddr_t");

  xfer += oprot->writeFieldBegin("_hostname", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->_hostname);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_hostaddr", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->_hostaddr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_port", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->_port);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(xinetaddr_t &a, xinetaddr_t &b) {
  using ::std::swap;
  swap(a._hostname, b._hostname);
  swap(a._hostaddr, b._hostaddr);
  swap(a._port, b._port);
}

const char* xletter_t::ascii_fingerprint = "66300C0BD0E5C868AF1BEF652F664894";
const uint8_t xletter_t::binary_fingerprint[16] = {0x66,0x30,0x0C,0x0B,0xD0,0xE5,0xC8,0x68,0xAF,0x1B,0xEF,0x65,0x2F,0x66,0x48,0x94};

uint32_t xletter_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__iaddr_table = false;
  bool isset__chk_table = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->_iaddr_table.clear();
            uint32_t _size6;
            ::apache::thrift::protocol::TType _etype9;
            xfer += iprot->readListBegin(_etype9, _size6);
            this->_iaddr_table.resize(_size6);
            uint32_t _i10;
            for (_i10 = 0; _i10 < _size6; ++_i10)
            {
              xfer += this->_iaddr_table[_i10].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset__iaddr_table = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->_chk_table.clear();
            uint32_t _size11;
            ::apache::thrift::protocol::TType _etype14;
            xfer += iprot->readListBegin(_etype14, _size11);
            this->_chk_table.resize(_size11);
            uint32_t _i15;
            for (_i15 = 0; _i15 < _size11; ++_i15)
            {
              xfer += this->_chk_table[_i15].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset__chk_table = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__iaddr_table)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__chk_table)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t xletter_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("xletter_t");

  xfer += oprot->writeFieldBegin("_iaddr_table", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->_iaddr_table.size()));
    std::vector<xinetaddr_t> ::const_iterator _iter16;
    for (_iter16 = this->_iaddr_table.begin(); _iter16 != this->_iaddr_table.end(); ++_iter16)
    {
      xfer += (*_iter16).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_chk_table", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->_chk_table.size()));
    std::vector<xchunk_entry_t> ::const_iterator _iter17;
    for (_iter17 = this->_chk_table.begin(); _iter17 != this->_chk_table.end(); ++_iter17)
    {
      xfer += (*_iter17).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(xletter_t &a, xletter_t &b) {
  using ::std::swap;
  swap(a._iaddr_table, b._iaddr_table);
  swap(a._chk_table, b._chk_table);
}

}} // namespace
