/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef DataXPeer_H
#define DataXPeer_H

#include <thrift/TDispatchProcessor.h>
#include "nynn_mm_types.h"

namespace nynn { namespace mm {

class DataXPeerIf {
 public:
  virtual ~DataXPeerIf() {}
  virtual void read(std::vector<std::vector<int8_t> > & _return, const std::string& hostname, const int64_t vtxno, const int32_t blkno) = 0;
  virtual void fetch(std::vector<std::vector<int8_t> > & _return, const int64_t vtxno, const int32_t blkno) = 0;
  virtual bool write(const xvertex_t& vtx) = 0;
};

class DataXPeerIfFactory {
 public:
  typedef DataXPeerIf Handler;

  virtual ~DataXPeerIfFactory() {}

  virtual DataXPeerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(DataXPeerIf* /* handler */) = 0;
};

class DataXPeerIfSingletonFactory : virtual public DataXPeerIfFactory {
 public:
  DataXPeerIfSingletonFactory(const boost::shared_ptr<DataXPeerIf>& iface) : iface_(iface) {}
  virtual ~DataXPeerIfSingletonFactory() {}

  virtual DataXPeerIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(DataXPeerIf* /* handler */) {}

 protected:
  boost::shared_ptr<DataXPeerIf> iface_;
};

class DataXPeerNull : virtual public DataXPeerIf {
 public:
  virtual ~DataXPeerNull() {}
  void read(std::vector<std::vector<int8_t> > & /* _return */, const std::string& /* hostname */, const int64_t /* vtxno */, const int32_t /* blkno */) {
    return;
  }
  void fetch(std::vector<std::vector<int8_t> > & /* _return */, const int64_t /* vtxno */, const int32_t /* blkno */) {
    return;
  }
  bool write(const xvertex_t& /* vtx */) {
    bool _return = false;
    return _return;
  }
};

typedef struct _DataXPeer_read_args__isset {
  _DataXPeer_read_args__isset() : hostname(false), vtxno(false), blkno(false) {}
  bool hostname;
  bool vtxno;
  bool blkno;
} _DataXPeer_read_args__isset;

class DataXPeer_read_args {
 public:

  DataXPeer_read_args() : hostname(), vtxno(0), blkno(0) {
  }

  virtual ~DataXPeer_read_args() throw() {}

  std::string hostname;
  int64_t vtxno;
  int32_t blkno;

  _DataXPeer_read_args__isset __isset;

  void __set_hostname(const std::string& val) {
    hostname = val;
  }

  void __set_vtxno(const int64_t val) {
    vtxno = val;
  }

  void __set_blkno(const int32_t val) {
    blkno = val;
  }

  bool operator == (const DataXPeer_read_args & rhs) const
  {
    if (!(hostname == rhs.hostname))
      return false;
    if (!(vtxno == rhs.vtxno))
      return false;
    if (!(blkno == rhs.blkno))
      return false;
    return true;
  }
  bool operator != (const DataXPeer_read_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataXPeer_read_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataXPeer_read_pargs {
 public:


  virtual ~DataXPeer_read_pargs() throw() {}

  const std::string* hostname;
  const int64_t* vtxno;
  const int32_t* blkno;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataXPeer_read_result__isset {
  _DataXPeer_read_result__isset() : success(false) {}
  bool success;
} _DataXPeer_read_result__isset;

class DataXPeer_read_result {
 public:

  DataXPeer_read_result() {
  }

  virtual ~DataXPeer_read_result() throw() {}

  std::vector<std::vector<int8_t> >  success;

  _DataXPeer_read_result__isset __isset;

  void __set_success(const std::vector<std::vector<int8_t> > & val) {
    success = val;
  }

  bool operator == (const DataXPeer_read_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataXPeer_read_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataXPeer_read_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataXPeer_read_presult__isset {
  _DataXPeer_read_presult__isset() : success(false) {}
  bool success;
} _DataXPeer_read_presult__isset;

class DataXPeer_read_presult {
 public:


  virtual ~DataXPeer_read_presult() throw() {}

  std::vector<std::vector<int8_t> > * success;

  _DataXPeer_read_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataXPeer_fetch_args__isset {
  _DataXPeer_fetch_args__isset() : vtxno(false), blkno(false) {}
  bool vtxno;
  bool blkno;
} _DataXPeer_fetch_args__isset;

class DataXPeer_fetch_args {
 public:

  DataXPeer_fetch_args() : vtxno(0), blkno(0) {
  }

  virtual ~DataXPeer_fetch_args() throw() {}

  int64_t vtxno;
  int32_t blkno;

  _DataXPeer_fetch_args__isset __isset;

  void __set_vtxno(const int64_t val) {
    vtxno = val;
  }

  void __set_blkno(const int32_t val) {
    blkno = val;
  }

  bool operator == (const DataXPeer_fetch_args & rhs) const
  {
    if (!(vtxno == rhs.vtxno))
      return false;
    if (!(blkno == rhs.blkno))
      return false;
    return true;
  }
  bool operator != (const DataXPeer_fetch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataXPeer_fetch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataXPeer_fetch_pargs {
 public:


  virtual ~DataXPeer_fetch_pargs() throw() {}

  const int64_t* vtxno;
  const int32_t* blkno;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataXPeer_fetch_result__isset {
  _DataXPeer_fetch_result__isset() : success(false) {}
  bool success;
} _DataXPeer_fetch_result__isset;

class DataXPeer_fetch_result {
 public:

  DataXPeer_fetch_result() {
  }

  virtual ~DataXPeer_fetch_result() throw() {}

  std::vector<std::vector<int8_t> >  success;

  _DataXPeer_fetch_result__isset __isset;

  void __set_success(const std::vector<std::vector<int8_t> > & val) {
    success = val;
  }

  bool operator == (const DataXPeer_fetch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataXPeer_fetch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataXPeer_fetch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataXPeer_fetch_presult__isset {
  _DataXPeer_fetch_presult__isset() : success(false) {}
  bool success;
} _DataXPeer_fetch_presult__isset;

class DataXPeer_fetch_presult {
 public:


  virtual ~DataXPeer_fetch_presult() throw() {}

  std::vector<std::vector<int8_t> > * success;

  _DataXPeer_fetch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataXPeer_write_args__isset {
  _DataXPeer_write_args__isset() : vtx(false) {}
  bool vtx;
} _DataXPeer_write_args__isset;

class DataXPeer_write_args {
 public:

  DataXPeer_write_args() {
  }

  virtual ~DataXPeer_write_args() throw() {}

  xvertex_t vtx;

  _DataXPeer_write_args__isset __isset;

  void __set_vtx(const xvertex_t& val) {
    vtx = val;
  }

  bool operator == (const DataXPeer_write_args & rhs) const
  {
    if (!(vtx == rhs.vtx))
      return false;
    return true;
  }
  bool operator != (const DataXPeer_write_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataXPeer_write_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataXPeer_write_pargs {
 public:


  virtual ~DataXPeer_write_pargs() throw() {}

  const xvertex_t* vtx;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataXPeer_write_result__isset {
  _DataXPeer_write_result__isset() : success(false) {}
  bool success;
} _DataXPeer_write_result__isset;

class DataXPeer_write_result {
 public:

  DataXPeer_write_result() : success(0) {
  }

  virtual ~DataXPeer_write_result() throw() {}

  bool success;

  _DataXPeer_write_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const DataXPeer_write_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataXPeer_write_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataXPeer_write_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataXPeer_write_presult__isset {
  _DataXPeer_write_presult__isset() : success(false) {}
  bool success;
} _DataXPeer_write_presult__isset;

class DataXPeer_write_presult {
 public:


  virtual ~DataXPeer_write_presult() throw() {}

  bool* success;

  _DataXPeer_write_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class DataXPeerClient : virtual public DataXPeerIf {
 public:
  DataXPeerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  DataXPeerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void read(std::vector<std::vector<int8_t> > & _return, const std::string& hostname, const int64_t vtxno, const int32_t blkno);
  void send_read(const std::string& hostname, const int64_t vtxno, const int32_t blkno);
  void recv_read(std::vector<std::vector<int8_t> > & _return);
  void fetch(std::vector<std::vector<int8_t> > & _return, const int64_t vtxno, const int32_t blkno);
  void send_fetch(const int64_t vtxno, const int32_t blkno);
  void recv_fetch(std::vector<std::vector<int8_t> > & _return);
  bool write(const xvertex_t& vtx);
  void send_write(const xvertex_t& vtx);
  bool recv_write();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class DataXPeerProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<DataXPeerIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (DataXPeerProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_read(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_write(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  DataXPeerProcessor(boost::shared_ptr<DataXPeerIf> iface) :
    iface_(iface) {
    processMap_["read"] = &DataXPeerProcessor::process_read;
    processMap_["fetch"] = &DataXPeerProcessor::process_fetch;
    processMap_["write"] = &DataXPeerProcessor::process_write;
  }

  virtual ~DataXPeerProcessor() {}
};

class DataXPeerProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  DataXPeerProcessorFactory(const ::boost::shared_ptr< DataXPeerIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< DataXPeerIfFactory > handlerFactory_;
};

class DataXPeerMultiface : virtual public DataXPeerIf {
 public:
  DataXPeerMultiface(std::vector<boost::shared_ptr<DataXPeerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~DataXPeerMultiface() {}
 protected:
  std::vector<boost::shared_ptr<DataXPeerIf> > ifaces_;
  DataXPeerMultiface() {}
  void add(boost::shared_ptr<DataXPeerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void read(std::vector<std::vector<int8_t> > & _return, const std::string& hostname, const int64_t vtxno, const int32_t blkno) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->read(_return, hostname, vtxno, blkno);
    }
    ifaces_[i]->read(_return, hostname, vtxno, blkno);
    return;
  }

  void fetch(std::vector<std::vector<int8_t> > & _return, const int64_t vtxno, const int32_t blkno) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetch(_return, vtxno, blkno);
    }
    ifaces_[i]->fetch(_return, vtxno, blkno);
    return;
  }

  bool write(const xvertex_t& vtx) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->write(vtx);
    }
    return ifaces_[i]->write(vtx);
  }

};

}} // namespace

#endif
