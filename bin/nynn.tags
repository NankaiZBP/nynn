!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ASSIGNMENT_H_BY_SATANSON	../inc/assignment.h	2;"	d
AcceptAss	../inc/assignment.h	/^		AcceptAss(Socket listenSock, int epollfd);$/;"	p	class:AcceptAss	access:public	signature:(Socket listenSock, int epollfd)
AcceptAss	../inc/assignment.h	/^class AcceptAss:public Assignment$/;"	c	inherits:Assignment
AcceptAss	../src/assignmet.cpp	/^AcceptAss::AcceptAss(Socket listenSock,int epollfd)$/;"	f	class:AcceptAss	signature:(Socket listenSock,int epollfd)
AcceptAss::AcceptAss	../inc/assignment.h	/^		AcceptAss(Socket listenSock, int epollfd);$/;"	p	class:AcceptAss	access:public	signature:(Socket listenSock, int epollfd)
AcceptAss::AcceptAss	../src/assignmet.cpp	/^AcceptAss::AcceptAss(Socket listenSock,int epollfd)$/;"	f	class:AcceptAss	signature:(Socket listenSock,int epollfd)
AcceptAss::epollfd	../inc/assignment.h	/^		int epollfd;$/;"	m	class:AcceptAss	access:private
AcceptAss::exec	../src/assignmet.cpp	/^void AcceptAss::exec()$/;"	f	class:AcceptAss	signature:()
AcceptAss::listenSock	../inc/assignment.h	/^		int listenSock;$/;"	m	class:AcceptAss	access:private
AcceptAss::~AcceptAss	../inc/assignment.h	/^		~AcceptAss();$/;"	p	class:AcceptAss	access:public	signature:()
AcceptAss::~AcceptAss	../src/assignmet.cpp	/^AcceptAss::~AcceptAss()$/;"	f	class:AcceptAss	signature:()
Ass1	../test/boss_demo.cpp	/^		Ass1(string* msg){$/;"	f	class:Ass1	access:public	signature:(string* msg)
Ass1	../test/boss_demo.cpp	/^class Ass1:public Assignment{$/;"	c	file:	inherits:Assignment
Ass1::Ass1	../test/boss_demo.cpp	/^		Ass1(string* msg){$/;"	f	class:Ass1	access:public	signature:(string* msg)
Ass1::exec	../test/boss_demo.cpp	/^		virtual void exec(){$/;"	f	class:Ass1	access:public	signature:()
Ass1::msg	../test/boss_demo.cpp	/^		string msg;$/;"	m	class:Ass1	file:	access:private
Ass1::~Ass1	../test/boss_demo.cpp	/^		virtual ~Ass1(){$/;"	f	class:Ass1	access:public	signature:()
Assignment	../inc/assignment.h	/^		Assignment();$/;"	p	class:Assignment	access:public	signature:()
Assignment	../inc/assignment.h	/^class Assignment$/;"	c
Assignment	../inc/assignment.h	/^class Assignment;$/;"	x
Assignment	../src/assignmet.cpp	/^Assignment::Assignment(){}$/;"	f	class:Assignment	signature:()
Assignment::Assignment	../inc/assignment.h	/^		Assignment();$/;"	p	class:Assignment	access:public	signature:()
Assignment::Assignment	../src/assignmet.cpp	/^Assignment::Assignment(){}$/;"	f	class:Assignment	signature:()
Assignment::exec	../inc/assignment.h	/^		virtual void exec()=0;$/;"	p	class:Assignment	access:public	signature:()
Assignment::~Assignment	../inc/assignment.h	/^		virtual ~Assignment();$/;"	p	class:Assignment	access:public	signature:()
Assignment::~Assignment	../src/assignmet.cpp	/^Assignment::~Assignment(){}$/;"	f	class:Assignment	signature:()
BLOCKING	../inc/socket.h	/^	BLOCKING=0,$/;"	e	enum:__anon1
BOSS_H_BY_SATANSON	../inc/boss.h	2;"	d
BUFF_SIZE	../test/nynn_cli.cpp	9;"	d	file:
BUFF_SIZE	../test/nynn_serv.cpp	8;"	d	file:
Boss	../inc/boss.h	/^		Boss(int maxEmployeeNum,int maxAssignmentNum);$/;"	p	class:Boss	access:public	signature:(int maxEmployeeNum,int maxAssignmentNum)
Boss	../inc/boss.h	/^class Boss;$/;"	x
Boss	../inc/boss.h	/^class Boss{$/;"	c
Boss	../src/boss.cpp	/^Boss::Boss(int maxEmployeeNum,int maxAssignmentNum)$/;"	f	class:Boss	signature:(int maxEmployeeNum,int maxAssignmentNum)
Boss::Boss	../inc/boss.h	/^		Boss(int maxEmployeeNum,int maxAssignmentNum);$/;"	p	class:Boss	access:public	signature:(int maxEmployeeNum,int maxAssignmentNum)
Boss::Boss	../src/boss.cpp	/^Boss::Boss(int maxEmployeeNum,int maxAssignmentNum)$/;"	f	class:Boss	signature:(int maxEmployeeNum,int maxAssignmentNum)
Boss::_assignments	../inc/boss.h	/^		list<Assignment*> _assignments;$/;"	m	class:Boss	access:private
Boss::_employees	../inc/boss.h	/^		list<Employee*> _employees;$/;"	m	class:Boss	access:private
Boss::_lock	../inc/boss.h	/^		pthread_mutex_t _lock;$/;"	m	class:Boss	access:private
Boss::_maxAssignmentNum	../inc/boss.h	/^		int _maxAssignmentNum;$/;"	m	class:Boss	access:private
Boss::_maxEmployeeNum	../inc/boss.h	/^		int _maxEmployeeNum;$/;"	m	class:Boss	access:private
Boss::_notEmpty	../inc/boss.h	/^		pthread_cond_t _notEmpty;$/;"	m	class:Boss	access:private
Boss::_notFull	../inc/boss.h	/^		pthread_cond_t _notFull;$/;"	m	class:Boss	access:private
Boss::assign	../inc/boss.h	/^		void assign(Assignment* as);$/;"	p	class:Boss	access:public	signature:(Assignment* as)
Boss::assign	../src/boss.cpp	/^void Boss::assign(Assignment* as)$/;"	f	class:Boss	signature:(Assignment* as)
Boss::cease	../inc/boss.h	/^		int cease();$/;"	p	class:Boss	access:public	signature:()
Boss::cease	../src/boss.cpp	/^int Boss::cease(){$/;"	f	class:Boss	signature:()
Boss::getAssignmentNum	../inc/boss.h	/^		int getAssignmentNum()const;$/;"	p	class:Boss	access:public	signature:() const
Boss::getAssignmentNum	../src/boss.cpp	/^int  Boss:: getAssignmentNum()const{$/;"	f	class:Boss	signature:() const
Boss::pickAssignment	../inc/boss.h	/^		Assignment* pickAssignment();$/;"	p	class:Boss	access:public	signature:()
Boss::pickAssignment	../src/boss.cpp	/^Assignment* Boss::pickAssignment()$/;"	f	class:Boss	signature:()
Boss::putAssignment	../inc/boss.h	/^		void putAssignment(Assignment* as);$/;"	p	class:Boss	access:public	signature:(Assignment* as)
Boss::putAssignment	../src/boss.cpp	/^void Boss::putAssignment(Assignment*as)$/;"	f	class:Boss	signature:(Assignment*as)
Boss::seal	../inc/boss.h	/^		void seal();$/;"	p	class:Boss	access:public	signature:()
Boss::timedcease	../inc/boss.h	/^		int timedcease(int msec);$/;"	p	class:Boss	access:public	signature:(int msec)
Boss::timedcease	../src/boss.cpp	/^int Boss::timedcease(int msec)$/;"	f	class:Boss	signature:(int msec)
Boss::trycease	../inc/boss.h	/^		int trycease();$/;"	p	class:Boss	access:public	signature:()
Boss::trycease	../src/boss.cpp	/^int  Boss::trycease(){$/;"	f	class:Boss	signature:()
Boss::~Boss	../inc/boss.h	/^		~Boss();$/;"	p	class:Boss	access:public	signature:()
Boss::~Boss	../src/boss.cpp	/^Boss::~Boss(){$/;"	f	class:Boss	signature:()
CONCURRENT_QUEUE_H_BY_SATANSON	../inc/concurrent_queue.h	2;"	d
CONTROL	../inc/nynn.h	/^	CONTROL=2$/;"	e	enum:__anon3
ConnectAss	../inc/assignment.h	/^		ConnectAss(Socket sock);$/;"	p	class:ConnectAss	access:public	signature:(Socket sock)
ConnectAss	../inc/assignment.h	/^class ConnectAss:public Assignment$/;"	c	inherits:Assignment,Assignment
ConnectAss::ConnectAss	../inc/assignment.h	/^		ConnectAss(Socket sock);$/;"	p	class:ConnectAss	access:public	signature:(Socket sock)
ConnectAss::sock	../inc/assignment.h	/^		Socket sock;$/;"	m	class:ConnectAss	access:private
ConnectAss::~ConnectAss	../inc/assignment.h	/^		~ConnectAss();$/;"	p	class:ConnectAss	access:public	signature:()
DEBUG	../bin/Makefile	/^DEBUG:=-DDEBUG -g$/;"	m
DistMemManager	../inc/assignment.h	/^class DistMemManager$/;"	c
ERROR	../inc/public.h	/^	ERROR=2$/;"	e	enum:__anon4
Employee	../inc/boss.h	/^		Employee();$/;"	p	class:Employee	access:public	signature:()
Employee	../inc/boss.h	/^class Employee;$/;"	x
Employee	../inc/boss.h	/^class Employee{$/;"	c
Employee	../src/boss.cpp	/^Employee::Employee()$/;"	f	class:Employee	signature:()
Employee::Employee	../inc/boss.h	/^		Employee();$/;"	p	class:Employee	access:public	signature:()
Employee::Employee	../src/boss.cpp	/^Employee::Employee()$/;"	f	class:Employee	signature:()
Employee::_tid	../inc/boss.h	/^		pthread_t _tid;$/;"	m	class:Employee	access:private
Employee::getID	../inc/boss.h	/^		pthread_t* getID();$/;"	p	class:Employee	access:public	signature:()
Employee::getID	../src/boss.cpp	/^pthread_t* Employee::getID()$/;"	f	class:Employee	signature:()
Employee::undertake	../inc/boss.h	/^		void undertake(Boss*boss);$/;"	p	class:Employee	access:public	signature:(Boss*boss)
Employee::undertake	../src/boss.cpp	/^void Employee::undertake(Boss* boss)$/;"	f	class:Employee	signature:(Boss* boss)
Employee::work	../inc/boss.h	/^		static void* work(void*);$/;"	p	class:Employee	access:public	signature:(void*)
Employee::work	../src/boss.cpp	/^void* Employee::work(void*arg)$/;"	f	class:Employee	signature:(void*arg)
Employee::~Employee	../inc/boss.h	/^		~Employee();$/;"	p	class:Employee	access:public	signature:()
Employee::~Employee	../src/boss.cpp	/^Employee::~Employee(){$/;"	f	class:Employee	signature:()
ExceptAss	../inc/assignment.h	/^		ExceptAss(Socket sock);$/;"	p	class:ExceptAss	access:public	signature:(Socket sock)
ExceptAss	../inc/assignment.h	/^class ExceptAss:public Assignment$/;"	c	inherits:Assignment,Assignment,Assignment,Assignment,Assignment
ExceptAss::ExceptAss	../inc/assignment.h	/^		ExceptAss(Socket sock);$/;"	p	class:ExceptAss	access:public	signature:(Socket sock)
ExceptAss::sock	../inc/assignment.h	/^		Socket sock;$/;"	m	class:ExceptAss	access:private
ExceptAss::~ExcepttAss	../inc/assignment.h	/^		~ExcepttAss();$/;"	p	class:ExceptAss	access:public	signature:()
HOSTNAME_SIZE	../inc/nynn_daemon.h	/^	HOSTNAME_SIZE=32$/;"	e	enum:__anon6
INFO	../inc/public.h	/^	INFO=0,$/;"	e	enum:__anon4
LINK_MAX	../inc/nynn_daemon.h	/^	LINK_MAX=20,$/;"	e	enum:__anon6
LISTEN_BACKLOG	../test/nynn_cli.cpp	8;"	d	file:
LISTEN_BACKLOG	../test/nynn_serv.cpp	7;"	d	file:
MAX_EVENTS	../test/nynn_cli.cpp	7;"	d	file:
MAX_EVENTS	../test/nynn_serv.cpp	6;"	d	file:
NONBLOCKING	../inc/socket.h	/^	NONBLOCKING=1$/;"	e	enum:__anon1
NYNN_DAEMON_H_BY_SATANSON	../inc/nynn_daemon.h	2;"	d
NYNN_H_BY_SATANSON	../inc/nynn.h	2;"	d
PROCESS	../inc/public.h	/^	PROCESS=0,$/;"	e	enum:__anon5
PUBLIC_H_BY_SATANSON	../inc/public.h	2;"	d
READ	../inc/nynn.h	/^	READ=1,$/;"	e	enum:__anon3
RecvAss	../inc/assignment.h	/^		RecvAss(Socket sock);$/;"	p	class:RecvAss	access:public	signature:(Socket sock)
RecvAss	../inc/assignment.h	/^class RecvAss:public Assignment$/;"	c	inherits:Assignment,Assignment,Assignment
RecvAss::RecvAss	../inc/assignment.h	/^		RecvAss(Socket sock);$/;"	p	class:RecvAss	access:public	signature:(Socket sock)
RecvAss::sock	../inc/assignment.h	/^		Socket sock;$/;"	m	class:RecvAss	access:private
RecvAss::~RecvAss	../inc/assignment.h	/^		~RecvAss();$/;"	p	class:RecvAss	access:public	signature:()
SOCKET_H_BY_SATANSON	../inc/socket.h	5;"	d
SendAss	../inc/assignment.h	/^		SendAss(Socket sock);$/;"	p	class:SendAss	access:public	signature:(Socket sock)
SendAss	../inc/assignment.h	/^class SendAss:public Assignment$/;"	c	inherits:Assignment,Assignment,Assignment,Assignment
SendAss	../src/assignmet.cpp	/^SendAss::SendAss(Socket sock)$/;"	f	class:SendAss	signature:(Socket sock)
SendAss::SendAss	../inc/assignment.h	/^		SendAss(Socket sock);$/;"	p	class:SendAss	access:public	signature:(Socket sock)
SendAss::SendAss	../src/assignmet.cpp	/^SendAss::SendAss(Socket sock)$/;"	f	class:SendAss	signature:(Socket sock)
SendAss::exec	../src/assignmet.cpp	/^void SendAss::exec()$/;"	f	class:SendAss	signature:()
SendAss::sock	../inc/assignment.h	/^		Socket sock;$/;"	m	class:SendAss	access:private
SendAss::~SendAss	../inc/assignment.h	/^		~SendAss();$/;"	p	class:SendAss	access:public	signature:()
Socket	../inc/socket.h	/^		Socket(const char*host,short port,int nonblocking=BLOCKING);$/;"	p	class:Socket	access:public	signature:(const char*host,short port,int nonblocking=BLOCKING)
Socket	../inc/socket.h	/^		Socket(int fd=-1,int nonblocking=BLOCKING);$/;"	p	class:Socket	access:public	signature:(int fd=-1,int nonblocking=BLOCKING)
Socket	../inc/socket.h	/^		Socket(sockaddr_in saddr,int nonblocking=BLOCKING);$/;"	p	class:Socket	access:public	signature:(sockaddr_in saddr,int nonblocking=BLOCKING)
Socket	../inc/socket.h	/^class Socket{$/;"	c
Socket	../src/socket.cpp	/^Socket::Socket(const char* host,short port,int nonblocking)$/;"	f	class:Socket	signature:(const char* host,short port,int nonblocking)
Socket	../src/socket.cpp	/^Socket::Socket(int sockfd,int nonblocking)$/;"	f	class:Socket	signature:(int sockfd,int nonblocking)
Socket	../src/socket.cpp	/^Socket::Socket(sockaddr_in addr,int nonblocking)$/;"	f	class:Socket	signature:(sockaddr_in addr,int nonblocking)
Socket	../test/socket.cpp	/^Socket::Socket(const char* host,short port,int nonblocking)$/;"	f	class:Socket	signature:(const char* host,short port,int nonblocking)
Socket	../test/socket.cpp	/^Socket::Socket(int sockfd,int nonblocking)$/;"	f	class:Socket	signature:(int sockfd,int nonblocking)
Socket	../test/socket.cpp	/^Socket::Socket(sockaddr_in addr,int nonblocking)$/;"	f	class:Socket	signature:(sockaddr_in addr,int nonblocking)
Socket::Socket	../inc/socket.h	/^		Socket(const char*host,short port,int nonblocking=BLOCKING);$/;"	p	class:Socket	access:public	signature:(const char*host,short port,int nonblocking=BLOCKING)
Socket::Socket	../inc/socket.h	/^		Socket(int fd=-1,int nonblocking=BLOCKING);$/;"	p	class:Socket	access:public	signature:(int fd=-1,int nonblocking=BLOCKING)
Socket::Socket	../inc/socket.h	/^		Socket(sockaddr_in saddr,int nonblocking=BLOCKING);$/;"	p	class:Socket	access:public	signature:(sockaddr_in saddr,int nonblocking=BLOCKING)
Socket::Socket	../src/socket.cpp	/^Socket::Socket(const char* host,short port,int nonblocking)$/;"	f	class:Socket	signature:(const char* host,short port,int nonblocking)
Socket::Socket	../src/socket.cpp	/^Socket::Socket(int sockfd,int nonblocking)$/;"	f	class:Socket	signature:(int sockfd,int nonblocking)
Socket::Socket	../src/socket.cpp	/^Socket::Socket(sockaddr_in addr,int nonblocking)$/;"	f	class:Socket	signature:(sockaddr_in addr,int nonblocking)
Socket::Socket	../test/socket.cpp	/^Socket::Socket(const char* host,short port,int nonblocking)$/;"	f	class:Socket	signature:(const char* host,short port,int nonblocking)
Socket::Socket	../test/socket.cpp	/^Socket::Socket(int sockfd,int nonblocking)$/;"	f	class:Socket	signature:(int sockfd,int nonblocking)
Socket::Socket	../test/socket.cpp	/^Socket::Socket(sockaddr_in addr,int nonblocking)$/;"	f	class:Socket	signature:(sockaddr_in addr,int nonblocking)
Socket::accept	../inc/socket.h	/^		Socket accept(int nonblocking=BLOCKING);$/;"	p	class:Socket	access:public	signature:(int nonblocking=BLOCKING)
Socket::accept	../src/socket.cpp	/^Socket Socket::accept(int nonblocking)$/;"	f	class:Socket	signature:(int nonblocking)
Socket::accept	../test/socket.cpp	/^Socket Socket::accept(int nonblocking)$/;"	f	class:Socket	signature:(int nonblocking)
Socket::close	../inc/socket.h	/^		int close();$/;"	p	class:Socket	access:public	signature:()
Socket::close	../src/socket.cpp	/^int Socket::close(){$/;"	f	class:Socket	signature:()
Socket::connect	../inc/socket.h	/^		int connect(const char* ip,short port);$/;"	p	class:Socket	access:public	signature:(const char* ip,short port)
Socket::connect	../inc/socket.h	/^		int connect(sockaddr_in addr);$/;"	p	class:Socket	access:public	signature:(sockaddr_in addr)
Socket::connect	../src/socket.cpp	/^int Socket::connect(const char* host,short port)$/;"	f	class:Socket	signature:(const char* host,short port)
Socket::connect	../src/socket.cpp	/^int Socket::connect(sockaddr_in addr)$/;"	f	class:Socket	signature:(sockaddr_in addr)
Socket::connect	../test/socket.cpp	/^int Socket::connect(const char* host,short port)$/;"	f	class:Socket	signature:(const char* host,short port)
Socket::connect	../test/socket.cpp	/^int Socket::connect(sockaddr_in addr)$/;"	f	class:Socket	signature:(sockaddr_in addr)
Socket::getlocalhost	../inc/socket.h	/^		uint32_t getlocalhost(char*host,size_t size=INET_ADDRSTRLEN);$/;"	p	class:Socket	access:public	signature:(char*host,size_t size=INET_ADDRSTRLEN)
Socket::getlocalhost	../src/socket.cpp	/^uint32_t Socket::getlocalhost(char*ip,size_t size)$/;"	f	class:Socket	signature:(char*ip,size_t size)
Socket::getlocalhost	../test/socket.cpp	/^uint32_t Socket::getlocalhost(char*ip,size_t size)$/;"	f	class:Socket	signature:(char*ip,size_t size)
Socket::getlocalport	../inc/socket.h	/^		unsigned short getlocalport();$/;"	p	class:Socket	access:public	signature:()
Socket::getlocalport	../src/socket.cpp	/^unsigned short Socket::getlocalport()$/;"	f	class:Socket	signature:()
Socket::getlocalport	../test/socket.cpp	/^unsigned short Socket::getlocalport()$/;"	f	class:Socket	signature:()
Socket::getremotehost	../inc/socket.h	/^		uint32_t getremotehost(char*host,size_t size=INET_ADDRSTRLEN);$/;"	p	class:Socket	access:public	signature:(char*host,size_t size=INET_ADDRSTRLEN)
Socket::getremotehost	../src/socket.cpp	/^uint32_t Socket::getremotehost(char*ip,size_t size)$/;"	f	class:Socket	signature:(char*ip,size_t size)
Socket::getremotehost	../test/socket.cpp	/^uint32_t Socket::getremotehost(char*ip,size_t size)$/;"	f	class:Socket	signature:(char*ip,size_t size)
Socket::getremoteport	../inc/socket.h	/^		unsigned short getremoteport();$/;"	p	class:Socket	access:public	signature:()
Socket::getremoteport	../src/socket.cpp	/^unsigned short Socket::getremoteport()$/;"	f	class:Socket	signature:()
Socket::getremoteport	../test/socket.cpp	/^unsigned short Socket::getremoteport()$/;"	f	class:Socket	signature:()
Socket::getsockfd	../inc/socket.h	/^		int getsockfd()const;$/;"	p	class:Socket	access:public	signature:() const
Socket::getsockfd	../src/socket.cpp	/^int Socket::getsockfd()const$/;"	f	class:Socket	signature:() const
Socket::getsockfd	../test/socket.cpp	/^int Socket::getsockfd()const$/;"	f	class:Socket	signature:() const
Socket::listen	../inc/socket.h	/^		int listen(int backlog);$/;"	p	class:Socket	access:public	signature:(int backlog)
Socket::listen	../src/socket.cpp	/^int Socket::listen(int backlog)$/;"	f	class:Socket	signature:(int backlog)
Socket::listen	../test/socket.cpp	/^int Socket::listen(int backlog)$/;"	f	class:Socket	signature:(int backlog)
Socket::recv	../inc/socket.h	/^		int recv(char *buff,int length,int flag=0);$/;"	p	class:Socket	access:public	signature:(char *buff,int length,int flag=0)
Socket::recv	../src/socket.cpp	/^int Socket::recv(char *buff,int length,int flag)$/;"	f	class:Socket	signature:(char *buff,int length,int flag)
Socket::recv	../test/socket.cpp	/^int Socket::recv(char *buff,int length)$/;"	f	class:Socket	signature:(char *buff,int length)
Socket::send	../inc/socket.h	/^		int send(const char *buff,int length);$/;"	p	class:Socket	access:public	signature:(const char *buff,int length)
Socket::send	../src/socket.cpp	/^int Socket::send(const char *buff,int length)$/;"	f	class:Socket	signature:(const char *buff,int length)
Socket::send	../test/socket.cpp	/^int Socket::send(const char *buff,int length)$/;"	f	class:Socket	signature:(const char *buff,int length)
Socket::shutdown	../inc/socket.h	/^		int shutdown();$/;"	p	class:Socket	access:public	signature:()
Socket::shutdown	../src/socket.cpp	/^int Socket::shutdown()$/;"	f	class:Socket	signature:()
Socket::shutdown	../test/socket.cpp	/^int Socket::shutdown()$/;"	f	class:Socket	signature:()
Socket::sockfd	../inc/socket.h	/^		int sockfd;$/;"	m	class:Socket	access:private
Socket::~Socket	../inc/socket.h	/^		~Socket();$/;"	p	class:Socket	access:public	signature:()
Socket::~Socket	../src/socket.cpp	/^Socket::~Socket()$/;"	f	class:Socket	signature:()
Socket::~Socket	../test/socket.cpp	/^Socket::~Socket()$/;"	f	class:Socket	signature:()
THREAD	../inc/public.h	/^	THREAD=1$/;"	e	enum:__anon5
WARN	../inc/public.h	/^	WARN=1,$/;"	e	enum:__anon4
WRITE	../inc/nynn.h	/^	WRITE=0,$/;"	e	enum:__anon3
__exit_on_error	../inc/public.h	/^void __exit_on_error($/;"	p	signature:( ostream &out, const char*file, const int line, const char *func, const int errnum, const char*msg, bool thread )
__exit_on_error	../src/public.cpp	/^void __exit_on_error($/;"	f	signature:( ostream &out, const char*file, const int line, const char *func, const int errnum, const char*msg, bool thread )
__log	../inc/public.h	/^void __log($/;"	p	signature:( ostream &out, const char *file, const int line, const char *func, const logtype_t type, int errnum, const char *fmt, ... )
__log	../src/public.cpp	/^void __log($/;"	f	signature:( ostream &out, const char*file, const int line, const char *func, const logtype_t type, const int errnum, const char*fmt, ... )
_assignments	../inc/boss.h	/^		list<Assignment*> _assignments;$/;"	m	class:Boss	access:private
_employees	../inc/boss.h	/^		list<Employee*> _employees;$/;"	m	class:Boss	access:private
_func	../src/boss.cpp	/^void* _func(void*arg){$/;"	f	signature:(void*arg)
_int_handler	../src/boss.cpp	/^void static _int_handler(int sig){$/;"	f	file:	signature:(int sig)
_lock	../inc/boss.h	/^		pthread_mutex_t _lock;$/;"	m	class:Boss	access:private
_maxAssignmentNum	../inc/boss.h	/^		int _maxAssignmentNum;$/;"	m	class:Boss	access:private
_maxEmployeeNum	../inc/boss.h	/^		int _maxEmployeeNum;$/;"	m	class:Boss	access:private
_notEmpty	../inc/boss.h	/^		pthread_cond_t _notEmpty;$/;"	m	class:Boss	access:private
_notFull	../inc/boss.h	/^		pthread_cond_t _notFull;$/;"	m	class:Boss	access:private
_tid	../inc/boss.h	/^		pthread_t _tid;$/;"	m	class:Employee	access:private
_timedcease	../src/boss.cpp	/^int _timedcease(Boss*boss,int msec)$/;"	f	signature:(Boss*boss,int msec)
accept	../inc/socket.h	/^		Socket accept(int nonblocking=BLOCKING);$/;"	p	class:Socket	access:public	signature:(int nonblocking=BLOCKING)
accept	../src/socket.cpp	/^Socket Socket::accept(int nonblocking)$/;"	f	class:Socket	signature:(int nonblocking)
accept	../test/socket.cpp	/^Socket Socket::accept(int nonblocking)$/;"	f	class:Socket	signature:(int nonblocking)
accept_handler	../inc/nynn_daemon.h	/^void* accept_handler(void*args);$/;"	p	signature:(void*args)
accept_handler	../src/nynn_daemon.cpp	/^void* accept_handler(void*args)$/;"	f	signature:(void*args)
addr	../inc/nynn.h	/^		int addr;$/;"	m	union:inet4addr::__anon2	access:public
assign	../inc/boss.h	/^		void assign(Assignment* as);$/;"	p	class:Boss	access:public	signature:(Assignment* as)
assign	../src/boss.cpp	/^void Boss::assign(Assignment* as)$/;"	f	class:Boss	signature:(Assignment* as)
b	../inc/nynn.h	/^		byte b[4];$/;"	m	union:inet4addr::__anon2	access:public
byte	../inc/nynn.h	/^typedef unsigned char byte;$/;"	t
cached	../src/nynn_daemon.cpp	/^nynn_request_t* cached;$/;"	v
cachedfragment	../inc/nynn_daemon.h	/^	nynn_request_t *cachedfragment;$/;"	m	struct:link_t	access:public
cease	../inc/boss.h	/^		int cease();$/;"	p	class:Boss	access:public	signature:()
cease	../src/boss.cpp	/^int Boss::cease(){$/;"	f	class:Boss	signature:()
chop	../inc/public.h	/^char* chop(const char ch,const char *src,char *dest);$/;"	p	signature:(const char ch,const char *src,char *dest)
chop	../src/public.cpp	/^char* chop(const char ch,const char *src,char *dest)$/;"	f	signature:(const char ch,const char *src,char *dest)
close	../inc/socket.h	/^		int close();$/;"	p	class:Socket	access:public	signature:()
close	../src/socket.cpp	/^int Socket::close(){$/;"	f	class:Socket	signature:()
concurrent_queue	../inc/concurrent_queue.h	/^		concurrent_queue(){$/;"	f	class:concurrent_queue	access:public	signature:()
concurrent_queue	../inc/concurrent_queue.h	/^template <typename T> class concurrent_queue{$/;"	c
concurrent_queue::concurrent_queue	../inc/concurrent_queue.h	/^		concurrent_queue(){$/;"	f	class:concurrent_queue	access:public	signature:()
concurrent_queue::empty	../inc/concurrent_queue.h	/^		bool empty(){$/;"	f	class:concurrent_queue	access:public	signature:()
concurrent_queue::lock	../inc/concurrent_queue.h	/^		pthread_mutex_t lock;$/;"	m	class:concurrent_queue	access:private
concurrent_queue::lst	../inc/concurrent_queue.h	/^		list<T> lst;$/;"	m	class:concurrent_queue	access:private
concurrent_queue::notempty	../inc/concurrent_queue.h	/^		pthread_cond_t notempty;$/;"	m	class:concurrent_queue	access:private
concurrent_queue::pop	../inc/concurrent_queue.h	/^		T pop(){$/;"	f	class:concurrent_queue	access:public	signature:()
concurrent_queue::push	../inc/concurrent_queue.h	/^		void push(const T& item){$/;"	f	class:concurrent_queue	access:public	signature:(const T& item)
concurrent_queue::~concurrent_queue	../inc/concurrent_queue.h	/^		~concurrent_queue(){$/;"	f	class:concurrent_queue	access:public	signature:()
connect	../inc/socket.h	/^		int connect(const char* ip,short port);$/;"	p	class:Socket	access:public	signature:(const char* ip,short port)
connect	../inc/socket.h	/^		int connect(sockaddr_in addr);$/;"	p	class:Socket	access:public	signature:(sockaddr_in addr)
connect	../src/socket.cpp	/^int Socket::connect(const char* host,short port)$/;"	f	class:Socket	signature:(const char* host,short port)
connect	../src/socket.cpp	/^int Socket::connect(sockaddr_in addr)$/;"	f	class:Socket	signature:(sockaddr_in addr)
connect	../test/socket.cpp	/^int Socket::connect(const char* host,short port)$/;"	f	class:Socket	signature:(const char* host,short port)
connect	../test/socket.cpp	/^int Socket::connect(sockaddr_in addr)$/;"	f	class:Socket	signature:(sockaddr_in addr)
connect_handler	../inc/nynn_daemon.h	/^void* connect_handler(void*args);$/;"	p	signature:(void*args)
connect_handler	../src/nynn_daemon.cpp	/^void* connect_handler(void*args)$/;"	f	signature:(void*args)
delaycleaned	../src/nynn_daemon.cpp	/^nynn_request_t* delaycleaned; $/;"	v
empty	../inc/concurrent_queue.h	/^		bool empty(){$/;"	f	class:concurrent_queue	access:public	signature:()
epollfd	../inc/assignment.h	/^		int epollfd;$/;"	m	class:AcceptAss	access:private
error	../inc/public.h	70;"	d
exchanger	../inc/nynn_daemon.h	/^void* exchanger(void*args);$/;"	p	signature:(void*args)
exchanger	../src/nynn_daemon.cpp	/^void*  exchanger(void* arg)$/;"	f	signature:(void* arg)
exec	../inc/assignment.h	/^		virtual void exec()=0;$/;"	p	class:Assignment	access:public	signature:()
exec	../src/assignmet.cpp	/^void AcceptAss::exec()$/;"	f	class:AcceptAss	signature:()
exec	../src/assignmet.cpp	/^void SendAss::exec()$/;"	f	class:SendAss	signature:()
exec	../test/boss_demo.cpp	/^		virtual void exec(){$/;"	f	class:Ass1	access:public	signature:()
exit_on_error	../inc/public.h	74;"	d
getAssignmentNum	../inc/boss.h	/^		int getAssignmentNum()const;$/;"	p	class:Boss	access:public	signature:() const
getAssignmentNum	../src/boss.cpp	/^int  Boss:: getAssignmentNum()const{$/;"	f	class:Boss	signature:() const
getID	../inc/boss.h	/^		pthread_t* getID();$/;"	p	class:Employee	access:public	signature:()
getID	../src/boss.cpp	/^pthread_t* Employee::getID()$/;"	f	class:Employee	signature:()
getaddr	../inc/nynn.h	/^		int getaddr();$/;"	p	class:inet4addr	access:public	signature:()
gethostaddr	../src/public.cpp	/^uint32_t gethostaddr(char *hostname,size_t size)$/;"	f	signature:(char *hostname,size_t size)
getlocalhost	../inc/socket.h	/^		uint32_t getlocalhost(char*host,size_t size=INET_ADDRSTRLEN);$/;"	p	class:Socket	access:public	signature:(char*host,size_t size=INET_ADDRSTRLEN)
getlocalhost	../src/socket.cpp	/^uint32_t Socket::getlocalhost(char*ip,size_t size)$/;"	f	class:Socket	signature:(char*ip,size_t size)
getlocalhost	../test/socket.cpp	/^uint32_t Socket::getlocalhost(char*ip,size_t size)$/;"	f	class:Socket	signature:(char*ip,size_t size)
getlocalport	../inc/socket.h	/^		unsigned short getlocalport();$/;"	p	class:Socket	access:public	signature:()
getlocalport	../src/socket.cpp	/^unsigned short Socket::getlocalport()$/;"	f	class:Socket	signature:()
getlocalport	../test/socket.cpp	/^unsigned short Socket::getlocalport()$/;"	f	class:Socket	signature:()
getremotehost	../inc/socket.h	/^		uint32_t getremotehost(char*host,size_t size=INET_ADDRSTRLEN);$/;"	p	class:Socket	access:public	signature:(char*host,size_t size=INET_ADDRSTRLEN)
getremotehost	../src/socket.cpp	/^uint32_t Socket::getremotehost(char*ip,size_t size)$/;"	f	class:Socket	signature:(char*ip,size_t size)
getremotehost	../test/socket.cpp	/^uint32_t Socket::getremotehost(char*ip,size_t size)$/;"	f	class:Socket	signature:(char*ip,size_t size)
getremoteport	../inc/socket.h	/^		unsigned short getremoteport();$/;"	p	class:Socket	access:public	signature:()
getremoteport	../src/socket.cpp	/^unsigned short Socket::getremoteport()$/;"	f	class:Socket	signature:()
getremoteport	../test/socket.cpp	/^unsigned short Socket::getremoteport()$/;"	f	class:Socket	signature:()
getsockfd	../inc/socket.h	/^		int getsockfd()const;$/;"	p	class:Socket	access:public	signature:() const
getsockfd	../src/socket.cpp	/^int Socket::getsockfd()const$/;"	f	class:Socket	signature:() const
getsockfd	../test/socket.cpp	/^int Socket::getsockfd()const$/;"	f	class:Socket	signature:() const
hostaddr	../inc/nynn_daemon.h	/^	uint32_t hostaddr;$/;"	m	struct:link_t	access:public
hostaddr	../inc/nynn_daemon.h	/^extern uint32_t hostaddr;$/;"	x
hostaddr	../src/nynn_daemon.cpp	/^uint32_t hostaddr;$/;"	v
hostname	../inc/nynn_daemon.h	/^	char hostname[32];$/;"	m	struct:link_t	access:public
hostname	../inc/nynn_daemon.h	/^extern char hostname[];$/;"	x
hostname	../src/nynn_daemon.cpp	/^char hostname[HOSTNAME_SIZE];$/;"	v
inet4addr	../inc/nynn.h	/^		explicit inet4addr(byte b[4]);$/;"	p	class:inet4addr	access:public	signature:(byte b[4])
inet4addr	../inc/nynn.h	/^		explicit inet4addr(const char*addr);$/;"	p	class:inet4addr	access:public	signature:(const char*addr)
inet4addr	../inc/nynn.h	/^		explicit inet4addr(int addr);$/;"	p	class:inet4addr	access:public	signature:(int addr)
inet4addr	../inc/nynn.h	/^		inet4addr(byte b1,byte b2,byte b3,byte b4);$/;"	p	class:inet4addr	access:public	signature:(byte b1,byte b2,byte b3,byte b4)
inet4addr	../inc/nynn.h	/^class inet4addr{$/;"	c
inet4addr::__anon2::addr	../inc/nynn.h	/^		int addr;$/;"	m	union:inet4addr::__anon2	access:public
inet4addr::__anon2::b	../inc/nynn.h	/^		byte b[4];$/;"	m	union:inet4addr::__anon2	access:public
inet4addr::getaddr	../inc/nynn.h	/^		int getaddr();$/;"	p	class:inet4addr	access:public	signature:()
inet4addr::inet4addr	../inc/nynn.h	/^		explicit inet4addr(byte b[4]);$/;"	p	class:inet4addr	access:public	signature:(byte b[4])
inet4addr::inet4addr	../inc/nynn.h	/^		explicit inet4addr(const char*addr);$/;"	p	class:inet4addr	access:public	signature:(const char*addr)
inet4addr::inet4addr	../inc/nynn.h	/^		explicit inet4addr(int addr);$/;"	p	class:inet4addr	access:public	signature:(int addr)
inet4addr::inet4addr	../inc/nynn.h	/^		inet4addr(byte b1,byte b2,byte b3,byte b4);$/;"	p	class:inet4addr	access:public	signature:(byte b1,byte b2,byte b3,byte b4)
inet4addr::inet4addr_t	../inc/nynn.h	/^	}inet4addr_t;$/;"	t	class:inet4addr	typeref:union:inet4addr::__anon2	access:private
inet4addr::ip	../inc/nynn.h	/^		inet4addr_t ip;$/;"	m	class:inet4addr	access:private
inet4addr_t	../inc/nynn.h	/^	}inet4addr_t;$/;"	t	class:inet4addr	typeref:union:inet4addr::__anon2	access:private
info	../inc/public.h	68;"	d
initSockaddr	../inc/public.h	/^void initSockaddr(struct sockaddr_in *addr_ptr,const char*host,short port);$/;"	p	signature:(struct sockaddr_in *addr_ptr,const char*host,short port)
initSockaddr	../src/public.cpp	/^void initSockaddr(struct sockaddr_in *addr_ptr,const char*host,short port)$/;"	f	signature:(struct sockaddr_in *addr_ptr,const char*host,short port)
initSockaddr	../test/socket.cpp	/^static void initSockaddr(struct sockaddr_in *addr_ptr,const char*host,short port)$/;"	f	file:	signature:(struct sockaddr_in *addr_ptr,const char*host,short port)
intr_handler	../src/nynn_daemon.cpp	/^void intr_handler(int signo)$/;"	f	signature:(int signo)
ip	../inc/nynn.h	/^		inet4addr_t ip;$/;"	m	class:inet4addr	access:private
link_t	../inc/nynn_daemon.h	/^struct link_t{$/;"	s
link_t::cachedfragment	../inc/nynn_daemon.h	/^	nynn_request_t *cachedfragment;$/;"	m	struct:link_t	access:public
link_t::hostaddr	../inc/nynn_daemon.h	/^	uint32_t hostaddr;$/;"	m	struct:link_t	access:public
link_t::hostname	../inc/nynn_daemon.h	/^	char hostname[32];$/;"	m	struct:link_t	access:public
link_t::operator <	../inc/nynn_daemon.h	/^	friend bool operator<(const link_t& lhs, const link_t &rhs);$/;"	p	struct:link_t	access:friend	signature:(const link_t& lhs, const link_t &rhs)
link_t::port	../inc/nynn_daemon.h	/^	uint16_t port;$/;"	m	struct:link_t	access:public
link_t::rfd	../inc/nynn_daemon.h	/^	int rfd;$/;"	m	struct:link_t	access:public
link_t::wfd	../inc/nynn_daemon.h	/^	int wfd;$/;"	m	struct:link_t	access:public
link_t::wqueue	../inc/nynn_daemon.h	/^	concurrent_queue<nynn_request_t*> wqueue;$/;"	m	struct:link_t	access:public
links	../inc/nynn_daemon.h	/^extern link_t links[];$/;"	x
links	../src/nynn_daemon.cpp	/^link_t links[LINK_MAX];$/;"	v
linksize	../inc/nynn_daemon.h	/^extern size_t linksize;$/;"	x
linksize	../src/nynn_daemon.cpp	/^size_t linksize;$/;"	v
listen	../inc/socket.h	/^		int listen(int backlog);$/;"	p	class:Socket	access:public	signature:(int backlog)
listen	../src/socket.cpp	/^int Socket::listen(int backlog)$/;"	f	class:Socket	signature:(int backlog)
listen	../test/socket.cpp	/^int Socket::listen(int backlog)$/;"	f	class:Socket	signature:(int backlog)
listenSock	../inc/assignment.h	/^		int listenSock;$/;"	m	class:AcceptAss	access:private
loadconfig	../inc/nynn_daemon.h	/^int loadconfig(const char*cfgpath,link_t *links,size_t size);$/;"	p	signature:(const char*cfgpath,link_t *links,size_t size)
loadconfig	../src/nynn_daemon.cpp	/^int loadconfig(const char*cfgpath,link_t *links,size_t size)$/;"	f	signature:(const char*cfgpath,link_t *links,size_t size)
lock	../inc/concurrent_queue.h	/^		pthread_mutex_t lock;$/;"	m	class:concurrent_queue	access:private
logtype_t	../inc/public.h	/^}logtype_t;$/;"	t	typeref:enum:__anon4
lst	../inc/concurrent_queue.h	/^		list<T> lst;$/;"	m	class:concurrent_queue	access:private
ltrim	../inc/public.h	/^char* ltrim(const char *chars,const char *src, char *dest);$/;"	p	signature:(const char *chars,const char *src, char *dest)
ltrim	../src/public.cpp	/^char* ltrim(const char *chars,const char *src, char *dest)$/;"	f	signature:(const char *chars,const char *src, char *dest)
main	../src/nynn_daemon.cpp	/^int main(int argc,char*argv[])$/;"	f	signature:(int argc,char*argv[])
main	../test/boss_demo.cpp	/^int main (){$/;"	f	signature:()
main	../test/cli.cpp	/^int main(int argc,char*argv[]){$/;"	f	signature:(int argc,char*argv[])
main	../test/client.cpp	/^int main()$/;"	f	signature:()
main	../test/gethostaddr.cpp	/^int main()$/;"	f	signature:()
main	../test/log_demo.cpp	/^int main()$/;"	f	signature:()
main	../test/nynn_cli.cpp	/^int main(int argc,char*argv[])$/;"	f	signature:(int argc,char*argv[])
main	../test/nynn_cli_demo.cpp	/^int main()$/;"	f	signature:()
main	../test/nynn_cli_demo1.cpp	/^int main()$/;"	f	signature:()
main	../test/nynn_serv.cpp	/^int main(int argc,char*argv[])$/;"	f	signature:(int argc,char*argv[])
main	../test/queue_demo.cpp	/^int main(int argc,char*argv[])$/;"	f	signature:(int argc,char*argv[])
main	../test/send_demo.cpp	/^int main(){$/;"	f	signature:()
main	../test/serv.cpp	/^int main(){$/;"	f	signature:()
main	../test/socket_demo.cpp	/^int main()$/;"	f	signature:()
main	../test/text_demo.cpp	/^int main()$/;"	f	signature:()
msg	../test/boss_demo.cpp	/^		string msg;$/;"	m	class:Ass1	file:	access:private
notempty	../inc/concurrent_queue.h	/^		pthread_cond_t notempty;$/;"	m	class:concurrent_queue	access:private
nr_cmd	../inc/nynn.h	/^	int 	nr_cmd;$/;"	m	struct:nynn_request_t	access:public
nr_refcount	../inc/nynn.h	/^	int 	nr_refcount;$/;"	m	struct:nynn_request_t	access:public
nr_shm	../inc/nynn.h	/^	char*  	nr_shm;$/;"	m	struct:nynn_request_t	access:public
nr_shmid	../inc/nynn.h	/^	int 	nr_shmid;$/;"	m	struct:nynn_request_t	access:public
nr_size	../inc/nynn.h	/^	size_t 	nr_size;$/;"	m	struct:nynn_request_t	access:public
nynn_read	../inc/nynn.h	/^int nynn_read(char**buff,size_t *size);$/;"	p	signature:(char**buff,size_t *size)
nynn_read	../inc/nynn.h	/^int nynn_read(int *shmid,size_t *size);$/;"	p	signature:(int *shmid,size_t *size)
nynn_read	../inc/nynn.h	/^int nynn_read(nynn_request_t* req);$/;"	p	signature:(nynn_request_t* req)
nynn_read	../src/nynn.cpp	/^int nynn_read(char**buff,size_t *size){$/;"	f	signature:(char**buff,size_t *size)
nynn_read	../src/nynn.cpp	/^int nynn_read(int *shmid,size_t *size)$/;"	f	signature:(int *shmid,size_t *size)
nynn_read	../src/nynn.cpp	/^int nynn_read(nynn_request_t* req)$/;"	f	signature:(nynn_request_t* req)
nynn_request_t	../inc/nynn.h	/^struct nynn_request_t{$/;"	s
nynn_request_t::nr_cmd	../inc/nynn.h	/^	int 	nr_cmd;$/;"	m	struct:nynn_request_t	access:public
nynn_request_t::nr_refcount	../inc/nynn.h	/^	int 	nr_refcount;$/;"	m	struct:nynn_request_t	access:public
nynn_request_t::nr_shm	../inc/nynn.h	/^	char*  	nr_shm;$/;"	m	struct:nynn_request_t	access:public
nynn_request_t::nr_shmid	../inc/nynn.h	/^	int 	nr_shmid;$/;"	m	struct:nynn_request_t	access:public
nynn_request_t::nr_size	../inc/nynn.h	/^	size_t 	nr_size;$/;"	m	struct:nynn_request_t	access:public
nynn_shmat	../inc/nynn.h	/^int nynn_shmat(int shmid, void**shmaddr, size_t size,bool removal);$/;"	p	signature:(int shmid, void**shmaddr, size_t size,bool removal)
nynn_shmat	../src/nynn.cpp	/^int nynn_shmat(int shmid, void **shmaddr,size_t size,bool removal)$/;"	f	signature:(int shmid, void **shmaddr,size_t size,bool removal)
nynn_shmdt	../inc/nynn.h	/^int nynn_shmdt(const void*shmaddr);$/;"	p	signature:(const void*shmaddr)
nynn_shmdt	../src/nynn.cpp	/^int nynn_shmdt(const void*shmaddr)$/;"	f	signature:(const void*shmaddr)
nynn_write	../inc/nynn.h	/^int nynn_write(uint32_t *inetaddr, size_t num, char*buff,size_t size);$/;"	p	signature:(uint32_t *inetaddr, size_t num, char*buff,size_t size)
nynn_write	../inc/nynn.h	/^int nynn_write(uint32_t *inetaddr, size_t num, int shmid,size_t size);$/;"	p	signature:(uint32_t *inetaddr, size_t num, int shmid,size_t size)
nynn_write	../inc/nynn.h	/^int nynn_write(uint32_t *inetaddr, size_t num, nynn_request_t* req);$/;"	p	signature:(uint32_t *inetaddr, size_t num, nynn_request_t* req)
nynn_write	../src/nynn.cpp	/^int nynn_write(uint32_t *inetaddr, size_t num, char*buff,size_t size)$/;"	f	signature:(uint32_t *inetaddr, size_t num, char*buff,size_t size)
nynn_write	../src/nynn.cpp	/^int nynn_write(uint32_t *inetaddr, size_t num, int shmid,size_t size)$/;"	f	signature:(uint32_t *inetaddr, size_t num, int shmid,size_t size)
nynn_write	../src/nynn.cpp	/^int nynn_write(uint32_t *inetaddr,size_t num,nynn_request_t* req)$/;"	f	signature:(uint32_t *inetaddr,size_t num,nynn_request_t* req)
operator <	../inc/nynn_daemon.h	/^	friend bool operator<(const link_t& lhs, const link_t &rhs);$/;"	p	struct:link_t	access:friend	signature:(const link_t& lhs, const link_t &rhs)
operator <	../src/nynn_daemon.cpp	/^bool operator<(const link_t &lhs,const link_t&rhs)$/;"	f	signature:(const link_t &lhs,const link_t&rhs)
pickAssignment	../inc/boss.h	/^		Assignment* pickAssignment();$/;"	p	class:Boss	access:public	signature:()
pickAssignment	../src/boss.cpp	/^Assignment* Boss::pickAssignment()$/;"	f	class:Boss	signature:()
poller	../inc/nynn_daemon.h	/^void* poller(void*args);$/;"	p	signature:(void*args)
poller	../src/nynn_daemon.cpp	/^void* poller(void* arg)$/;"	f	signature:(void* arg)
pop	../inc/concurrent_queue.h	/^		T pop(){$/;"	f	class:concurrent_queue	access:public	signature:()
port	../inc/nynn_daemon.h	/^	uint16_t port;$/;"	m	struct:link_t	access:public
push	../inc/concurrent_queue.h	/^		void push(const T& item){$/;"	f	class:concurrent_queue	access:public	signature:(const T& item)
putAssignment	../inc/boss.h	/^		void putAssignment(Assignment* as);$/;"	p	class:Boss	access:public	signature:(Assignment* as)
putAssignment	../src/boss.cpp	/^void Boss::putAssignment(Assignment*as)$/;"	f	class:Boss	signature:(Assignment*as)
recv	../inc/socket.h	/^		int recv(char *buff,int length,int flag=0);$/;"	p	class:Socket	access:public	signature:(char *buff,int length,int flag=0)
recv	../src/socket.cpp	/^int Socket::recv(char *buff,int length,int flag)$/;"	f	class:Socket	signature:(char *buff,int length,int flag)
recv	../test/socket.cpp	/^int Socket::recv(char *buff,int length)$/;"	f	class:Socket	signature:(char *buff,int length)
req	../inc/nynn_daemon.h	/^	nynn_request_t*req;$/;"	m	struct:task_t	access:public
rfd	../inc/nynn_daemon.h	/^	int rfd;$/;"	m	struct:link_t	access:public
rqueue	../inc/nynn_daemon.h	/^extern concurrent_queue<nynn_request_t*> rqueue;$/;"	x
rqueue	../src/nynn_daemon.cpp	/^concurrent_queue<nynn_request_t*> rqueue;$/;"	v
rtrim	../inc/public.h	/^char* rtrim(const char *chars,const char *src, char *dest);$/;"	p	signature:(const char *chars,const char *src, char *dest)
rtrim	../src/public.cpp	/^char* rtrim(const char *chars,const char *src, char *dest)$/;"	f	signature:(const char *chars,const char *src, char *dest)
seal	../inc/boss.h	/^		void seal();$/;"	p	class:Boss	access:public	signature:()
send	../inc/socket.h	/^		int send(const char *buff,int length);$/;"	p	class:Socket	access:public	signature:(const char *buff,int length)
send	../src/socket.cpp	/^int Socket::send(const char *buff,int length)$/;"	f	class:Socket	signature:(const char *buff,int length)
send	../test/socket.cpp	/^int Socket::send(const char *buff,int length)$/;"	f	class:Socket	signature:(const char *buff,int length)
setNonBlocking	../inc/public.h	/^void setNonBlocking(int sockfd);$/;"	p	signature:(int sockfd)
setNonBlocking	../src/public.cpp	/^void setNonBlocking(int sockfd)$/;"	f	signature:(int sockfd)
setNonBlocking	../test/socket.cpp	/^static void setNonBlocking(int sockfd)$/;"	f	file:	signature:(int sockfd)
shutdown	../inc/socket.h	/^		int shutdown();$/;"	p	class:Socket	access:public	signature:()
shutdown	../src/socket.cpp	/^int Socket::shutdown()$/;"	f	class:Socket	signature:()
shutdown	../test/socket.cpp	/^int Socket::shutdown()$/;"	f	class:Socket	signature:()
sock	../inc/assignment.h	/^		Socket sock;$/;"	m	class:ConnectAss	access:private
sock	../inc/assignment.h	/^		Socket sock;$/;"	m	class:ExceptAss	access:private
sock	../inc/assignment.h	/^		Socket sock;$/;"	m	class:RecvAss	access:private
sock	../inc/assignment.h	/^		Socket sock;$/;"	m	class:SendAss	access:private
sockfd	../inc/nynn_daemon.h	/^	int sockfd;$/;"	m	struct:task_t	access:public
sockfd	../inc/socket.h	/^		int sockfd;$/;"	m	class:Socket	access:private
sync_args_t	../src/boss.cpp	/^struct sync_args_t{$/;"	s	file:
sync_args_t::timeout	../src/boss.cpp	/^	pthread_cond_t timeout;$/;"	m	struct:sync_args_t	file:	access:public
sync_args_t::timeoutLock	../src/boss.cpp	/^	pthread_mutex_t timeoutLock;$/;"	m	struct:sync_args_t	file:	access:public
sync_args_t::triggerLock	../src/boss.cpp	/^	pthread_mutex_t triggerLock;$/;"	m	struct:sync_args_t	file:	access:public
sync_args_t::val	../src/boss.cpp	/^	void* val;$/;"	m	struct:sync_args_t	file:	access:public
task_queue	../inc/nynn_daemon.h	/^extern concurrent_queue<task_t*> task_queue;$/;"	x
task_queue	../src/nynn_daemon.cpp	/^concurrent_queue<task_t*> task_queue;$/;"	v
task_t	../inc/nynn_daemon.h	/^	task_t(nynn_request_t*req,int sockfd){$/;"	f	struct:task_t	access:public	signature:(nynn_request_t*req,int sockfd)
task_t	../inc/nynn_daemon.h	/^struct task_t{$/;"	s
task_t::req	../inc/nynn_daemon.h	/^	nynn_request_t*req;$/;"	m	struct:task_t	access:public
task_t::sockfd	../inc/nynn_daemon.h	/^	int sockfd;$/;"	m	struct:task_t	access:public
task_t::task_t	../inc/nynn_daemon.h	/^	task_t(nynn_request_t*req,int sockfd){$/;"	f	struct:task_t	access:public	signature:(nynn_request_t*req,int sockfd)
thread_exit_on_error	../inc/public.h	72;"	d
timedcease	../inc/boss.h	/^		int timedcease(int msec);$/;"	p	class:Boss	access:public	signature:(int msec)
timedcease	../src/boss.cpp	/^int Boss::timedcease(int msec)$/;"	f	class:Boss	signature:(int msec)
timeout	../src/boss.cpp	/^	pthread_cond_t timeout;$/;"	m	struct:sync_args_t	file:	access:public
timeoutLock	../src/boss.cpp	/^	pthread_mutex_t timeoutLock;$/;"	m	struct:sync_args_t	file:	access:public
triggerLock	../src/boss.cpp	/^	pthread_mutex_t triggerLock;$/;"	m	struct:sync_args_t	file:	access:public
trycease	../inc/boss.h	/^		int trycease();$/;"	p	class:Boss	access:public	signature:()
trycease	../src/boss.cpp	/^int  Boss::trycease(){$/;"	f	class:Boss	signature:()
undertake	../inc/boss.h	/^		void undertake(Boss*boss);$/;"	p	class:Employee	access:public	signature:(Boss*boss)
undertake	../src/boss.cpp	/^void Employee::undertake(Boss* boss)$/;"	f	class:Employee	signature:(Boss* boss)
val	../src/boss.cpp	/^	void* val;$/;"	m	struct:sync_args_t	file:	access:public
warn	../inc/public.h	69;"	d
wfd	../inc/nynn_daemon.h	/^	int wfd;$/;"	m	struct:link_t	access:public
work	../inc/boss.h	/^		static void* work(void*);$/;"	p	class:Employee	access:public	signature:(void*)
work	../src/boss.cpp	/^void* Employee::work(void*arg)$/;"	f	class:Employee	signature:(void*arg)
wqueue	../inc/nynn_daemon.h	/^	concurrent_queue<nynn_request_t*> wqueue;$/;"	m	struct:link_t	access:public
~AcceptAss	../inc/assignment.h	/^		~AcceptAss();$/;"	p	class:AcceptAss	access:public	signature:()
~AcceptAss	../src/assignmet.cpp	/^AcceptAss::~AcceptAss()$/;"	f	class:AcceptAss	signature:()
~Ass1	../test/boss_demo.cpp	/^		virtual ~Ass1(){$/;"	f	class:Ass1	access:public	signature:()
~Assignment	../inc/assignment.h	/^		virtual ~Assignment();$/;"	p	class:Assignment	access:public	signature:()
~Assignment	../src/assignmet.cpp	/^Assignment::~Assignment(){}$/;"	f	class:Assignment	signature:()
~Boss	../inc/boss.h	/^		~Boss();$/;"	p	class:Boss	access:public	signature:()
~Boss	../src/boss.cpp	/^Boss::~Boss(){$/;"	f	class:Boss	signature:()
~ConnectAss	../inc/assignment.h	/^		~ConnectAss();$/;"	p	class:ConnectAss	access:public	signature:()
~Employee	../inc/boss.h	/^		~Employee();$/;"	p	class:Employee	access:public	signature:()
~Employee	../src/boss.cpp	/^Employee::~Employee(){$/;"	f	class:Employee	signature:()
~ExcepttAss	../inc/assignment.h	/^		~ExcepttAss();$/;"	p	class:ExceptAss	access:public	signature:()
~RecvAss	../inc/assignment.h	/^		~RecvAss();$/;"	p	class:RecvAss	access:public	signature:()
~SendAss	../inc/assignment.h	/^		~SendAss();$/;"	p	class:SendAss	access:public	signature:()
~Socket	../inc/socket.h	/^		~Socket();$/;"	p	class:Socket	access:public	signature:()
~Socket	../src/socket.cpp	/^Socket::~Socket()$/;"	f	class:Socket	signature:()
~Socket	../test/socket.cpp	/^Socket::~Socket()$/;"	f	class:Socket	signature:()
~concurrent_queue	../inc/concurrent_queue.h	/^		~concurrent_queue(){$/;"	f	class:concurrent_queue	access:public	signature:()
